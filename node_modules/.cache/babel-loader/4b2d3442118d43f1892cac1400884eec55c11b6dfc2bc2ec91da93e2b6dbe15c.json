{"ast":null,"code":"import { combineReducers, applyMiddleware, legacy_createStore as createStore } from 'redux';\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { productListReducer, productDetailsReducer } from \"./redux/reducers/productReducer\";\nimport { cartReducer } from \"./redux/reducers/cartReducers\";\nimport { userLoginReducer, userProfileDetailsReducer, userRegisterReducer, userUpdateProfileReducer } from \"./redux/reducers/userReducers\";\nimport { orderCreateReducer } from './redux/reducers/orderReducer';\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null;\n\n//get shipping Address From Storage\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ? JSON.parse(localStorage.getItem('shippingAddress')) : {};\nconst cartItemsFromStorage = localStorage.getItem(\"cartItems\") ? JSON.parse(localStorage.getItem('cartItems')) : [];\n\n// // here we combine all the reducers/actions\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  cart: cartReducer,\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer,\n  userProfileDetails: userProfileDetailsReducer,\n  userUpdateProfile: userUpdateProfileReducer,\n  orderCreate: orderCreateReducer\n});\n\n// here we create a global state that can be accessed from anywhere in the app.\nconst initialState = {\n  cart: {\n    cartItems: cartItemsFromStorage,\n    shippingAddress: shippingAddressFromStorage\n  },\n  userLogin: {\n    userInfo: userInfoFromStorage\n  }\n};\n\n// // thunk is a middleware which combine the redux and react together\nconst middleware = [thunk];\n\n// //create store\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"names":["combineReducers","applyMiddleware","legacy_createStore","createStore","thunk","composeWithDevTools","productListReducer","productDetailsReducer","cartReducer","userLoginReducer","userProfileDetailsReducer","userRegisterReducer","userUpdateProfileReducer","orderCreateReducer","userInfoFromStorage","localStorage","getItem","JSON","parse","shippingAddressFromStorage","cartItemsFromStorage","reducer","productList","productDetails","cart","userLogin","userRegister","userProfileDetails","userUpdateProfile","orderCreate","initialState","cartItems","shippingAddress","userInfo","middleware","store"],"sources":["/home/ibrahim/MERN-ecommerce/frontend/src/store.js"],"sourcesContent":["\nimport { combineReducers, applyMiddleware, legacy_createStore as createStore } from 'redux'\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { productListReducer, productDetailsReducer } from \"./redux/reducers/productReducer\"\nimport { cartReducer } from \"./redux/reducers/cartReducers\"\nimport { userLoginReducer, userProfileDetailsReducer, userRegisterReducer, userUpdateProfileReducer } from \"./redux/reducers/userReducers\";\nimport { orderCreateReducer } from './redux/reducers/orderReducer'\n\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null;\n\n//get shipping Address From Storage\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ? JSON.parse(localStorage.getItem('shippingAddress')) : {}\n\nconst cartItemsFromStorage = localStorage.getItem(\"cartItems\")\n    ? JSON.parse(localStorage.getItem('cartItems'))\n    : [];\n\n// // here we combine all the reducers/actions\nconst reducer = combineReducers({\n    productList: productListReducer,\n    productDetails: productDetailsReducer,\n    cart: cartReducer,\n    userLogin: userLoginReducer,\n    userRegister: userRegisterReducer,\n    userProfileDetails: userProfileDetailsReducer,\n    userUpdateProfile: userUpdateProfileReducer,\n    orderCreate:orderCreateReducer\n});\n\n// here we create a global state that can be accessed from anywhere in the app.\nconst initialState = {\n    cart: {\n        cartItems: cartItemsFromStorage,\n        shippingAddress: shippingAddressFromStorage\n    },\n    userLogin: {\n        userInfo: userInfoFromStorage\n    }\n};\n\n// // thunk is a middleware which combine the redux and react together\nconst middleware = [thunk];\n\n\n// //create store\nconst store = createStore(\n    reducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n\n"],"mappings":"AACA,SAASA,eAAe,EAAEC,eAAe,EAAEC,kBAAkB,IAAIC,WAAW,QAAQ,OAAO;AAC3F,OAAOC,KAAK,MAAM,aAAa;AAC/B,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,kBAAkB,EAAEC,qBAAqB,QAAQ,iCAAiC;AAC3F,SAASC,WAAW,QAAQ,+BAA+B;AAC3D,SAASC,gBAAgB,EAAEC,yBAAyB,EAAEC,mBAAmB,EAAEC,wBAAwB,QAAQ,+BAA+B;AAC1I,SAASC,kBAAkB,QAAQ,+BAA+B;AAElE,MAAMC,mBAAmB,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,GAAG,IAAI;;AAElH;AACA,MAAMG,0BAA0B,GAAGJ,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC;AAErI,MAAMI,oBAAoB,GAAGL,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,GACxDC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,GAC7C,EAAE;;AAER;AACA,MAAMK,OAAO,GAAGrB,eAAe,CAAC;EAC5BsB,WAAW,EAAEhB,kBAAkB;EAC/BiB,cAAc,EAAEhB,qBAAqB;EACrCiB,IAAI,EAAEhB,WAAW;EACjBiB,SAAS,EAAEhB,gBAAgB;EAC3BiB,YAAY,EAAEf,mBAAmB;EACjCgB,kBAAkB,EAAEjB,yBAAyB;EAC7CkB,iBAAiB,EAAEhB,wBAAwB;EAC3CiB,WAAW,EAAChB;AAChB,CAAC,CAAC;;AAEF;AACA,MAAMiB,YAAY,GAAG;EACjBN,IAAI,EAAE;IACFO,SAAS,EAAEX,oBAAoB;IAC/BY,eAAe,EAAEb;EACrB,CAAC;EACDM,SAAS,EAAE;IACPQ,QAAQ,EAAEnB;EACd;AACJ,CAAC;;AAED;AACA,MAAMoB,UAAU,GAAG,CAAC9B,KAAK,CAAC;;AAG1B;AACA,MAAM+B,KAAK,GAAGhC,WAAW,CACrBkB,OAAO,EACPS,YAAY,EACZzB,mBAAmB,CAACJ,eAAe,CAAC,GAAGiC,UAAU,CAAC,CAAC,CACtD;AAED,eAAeC,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}